import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const generateProductReport = (productData) => {
  // Create a new PDF instance
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Add title
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text('PRODUCT SUBMISSION REPORT', pageWidth / 2, 30, { align: 'center' });
  
  // Add company info
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated for: ${productData.manufacturer || 'Demo Company'}`, 20, 50);
  pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 60);
  
  // Add product details section
  pdf.setFontSize(16);
  pdf.setTextColor(40, 40, 40);
  pdf.text('PRODUCT DETAILS', 20, 80);
  
  // Add horizontal line
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 85, pageWidth - 20, 85);
  
  // Product information
  let yPosition = 100;
  
  const addField = (label, value) => {
    pdf.setFontSize(12);
    pdf.setTextColor(40, 40, 40);
    pdf.text(`${label}:`, 20, yPosition);
    
    pdf.setTextColor(80, 80, 80);
    pdf.text(String(value || 'Not provided'), 80, yPosition);
    yPosition += 10;
  };
  
  addField('Product Name', productData.productName);
  addField('Category', productData.category);
  addField('Price', productData.price ? `$${productData.price}` : 'Not provided');
  addField('Manufacturer', productData.manufacturer);
  addField('Eco-Friendly', productData.ecoFriendly);
  
  // Description section
  if (productData.description) {
    yPosition += 10;
    pdf.setFontSize(14);
    pdf.setTextColor(40, 40, 40);
    pdf.text('DESCRIPTION:', 20, yPosition);
    
    // Split description into lines that fit the page
    const descriptionLines = pdf.splitTextToSize(productData.description, pageWidth - 40);
    yPosition += 10;
    
    pdf.setFontSize(10);
    pdf.setTextColor(80, 80, 80);
    descriptionLines.forEach(line => {
      if (yPosition > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
      }
      pdf.text(line, 20, yPosition);
      yPosition += 5;
    });
  }
  
  // Add footer
  const footerY = pageHeight - 10;
  pdf.setFontSize(8);
  pdf.setTextColor(150, 150, 150);
  pdf.text('Generated by Product Submission Portal', pageWidth / 2, footerY, { align: 'center' });
  
  // Save the PDF
  pdf.save(`product-report-${productData.productName || 'product'}.pdf`);
};

// Alternative: HTML-based PDF generation (better formatting)
export const generateHTMLReport = async (productData) => {
  // Create a temporary div for HTML content
  const reportDiv = document.createElement('div');
  reportDiv.style.padding = '20px';
  reportDiv.style.fontFamily = 'Arial, sans-serif';
  reportDiv.style.maxWidth = '800px';
  
  reportDiv.innerHTML = `
    <div style="text-align: center; margin-bottom: 30px;">
      <h1 style="color: #333; margin-bottom: 10px;">PRODUCT SUBMISSION REPORT</h1>
      <div style="color: #666; font-size: 14px;">
        Generated on: ${new Date().toLocaleDateString()} | For: ${productData.manufacturer || 'Demo Company'}
      </div>
    </div>
    
    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h2 style="color: #333; margin-bottom: 15px;">Product Information</h2>
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
        <div><strong>Product Name:</strong> ${productData.productName || 'Not provided'}</div>
        <div><strong>Category:</strong> ${productData.category || 'Not provided'}</div>
        <div><strong>Price:</strong> ${productData.price ? `$${productData.price}` : 'Not provided'}</div>
        <div><strong>Manufacturer:</strong> ${productData.manufacturer || 'Not provided'}</div>
        <div><strong>Eco-Friendly:</strong> ${productData.ecoFriendly || 'Not specified'}</div>
      </div>
    </div>
    
    ${productData.description ? `
    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
      <h2 style="color: #333; margin-bottom: 15px;">Product Description</h2>
      <p style="line-height: 1.6; color: #555;">${productData.description}</p>
    </div>
    ` : ''}
    
    <div style="margin-top: 30px; text-align: center; color: #999; font-size: 12px;">
      This report was automatically generated by the Product Submission Portal
    </div>
  `;
  
  document.body.appendChild(reportDiv);
  
  try {
    // Convert HTML to canvas then to PDF
    const canvas = await html2canvas(reportDiv);
    const imgData = canvas.toDataURL('image/png');
    
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
    
    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
    pdf.save(`product-report-${productData.productName || 'product'}.pdf`);
  } catch (error) {
    console.error('PDF generation error:', error);
    // Fallback to simple PDF
    generateProductReport(productData);
  } finally {
    document.body.removeChild(reportDiv);
  }
};